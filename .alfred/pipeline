  
properties(
  [
    buildDiscarder(
      logRotator(
        numToKeepStr: '1'
      )
    )
  ]
)

node {
  stage ('Checkout') {
    checkout scm
    GIT_REPO_NAME = sh (
      script: "basename `git config --get remote.origin.url` | sed 's/.git//'",
      returnStdout: true
    ).trim()
    COMMIT_ID = sh (
      script: "git rev-parse HEAD",
      returnStdout: true
    ).trim()
    COMMIT_SHORT = sh (
      script: "git rev-parse --short HEAD",
      returnStdout: true
    ).trim()
    S3_BUCKET = sh (
      script: "aws ssm get-parameter --name $GIT_REPO_NAME'-'$JOB_BASE_NAME'-bucket' --query Parameter.Value | sed 's/\"//g'",
      returnStdout: true
    ).trim()
    env_file_id = sh (
      script: "echo 'env_file_'$JOB_BASE_NAME",
      returnStdout: true
    ).trim()
    withCredentials([file(credentialsId: env_file_id, variable: 'ENV_FILE'), file(credentialsId: 'AIRSIDE_PEM', variable: 'AIRSIDE_PEM')]) {
      sh "cat ${AIRSIDE_PEM} > .alfred/access-key"
      sh "cat ${ENV_FILE} > .env"
    }

    sh """
      echo $GIT_REPO_NAME > .alfred/git-repo-name.txt
      echo $COMMIT_ID > .alfred/git-commit-id.txt
      echo $COMMIT_SHORT > .alfred/git-commit-short.txt
      echo $S3_BUCKET > .alfred/s3-bucket.txt
    """
  
    sh '$(sh .alfred/checkout.sh)'
  }
  stage ('Testing') {
    sh (
      script: 'sh .alfred/testing.sh',
      returnStdout: false
    )
  }
  stage ('Deploy to S3') {
    sh """
      GIT_REPO_NAME=$(cat .alfred/git-repo-name.txt)
      COMMIT_SHA=$(cat .alfred/git-commit-short.txt)
      CONTAINER_NAME=$GIT_REPO_NAME'-'$JOB_BASE_NAME
      IMAGE_NAME=$CONTAINER_NAME':'$COMMIT_SHA
      S3_BUCKET=$(cat .alfred/s3-bucket.txt)
      aws s3 sync --acl public-read --sse --delete dist/ $S3_BUCKET

      curl -X POST -s $SLACK_URL -d '{
        "type": "mrkdwn",
        "text": "<'$BUILD_URL'console|'$BUILD_NUMBER'> *Synching* `'${COMMIT_SHA}'` to '$S3_BUCKET' *Complete*"
      }'
    """
  }
  stage ('Clean up') {
    sh (
      script: 'docker system prune -f',
      returnStdout: true
    )
  }
}
